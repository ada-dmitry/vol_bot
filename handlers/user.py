from aiogram import Router, F
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.state import State, StatesGroup
from sqlalchemy import select, insert, update
import logging

from models import User
from database import async_session
from keyboards import get_subscription_keyboard

logger = logging.getLogger(__name__)
router = Router()


# –ú–∞—à–∏–Ω–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π
class Register(StatesGroup):
    waiting_for_fullname = State()
    waiting_for_study_group = State()


@router.message(F.text == "/start")
async def start_handler(message: Message, state: FSMContext):
    user_id = message.from_user.id
    logger.info(f"User {message.from_user.id} started the bot")
    async with async_session() as session:
        result = await session.execute(select(User).where(User.user_id == user_id))
        user = result.scalar_one_or_none()

        if user:
            # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–º –∑–∞–ø—É—Å–∫–µ
            text = (
                f"üëã –ü—Ä–∏–≤–µ—Ç, {user.full_name or '–¥—Ä—É–≥'}!\n"
                f"–ì—Ä—É–ø–ø–∞: {user.study_group or '–Ω–µ —É–∫–∞–∑–∞–Ω–∞'}\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ, —á—Ç–æ–±—ã —É–ø—Ä–∞–≤–ª—è—Ç—å –ø–æ–¥–ø–∏—Å–∫–æ–π:"
            )
            await message.answer(
                text, reply_markup=get_subscription_keyboard(user.is_subscribed)
            )
        else:
            # –ü–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫ ‚Äî —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
            await state.set_state(Register.waiting_for_fullname)
            await message.answer(
                "üëã –ü—Ä–∏–≤–µ—Ç! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏ —Å–≤–æ–∏ –§–ò–û –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–æ–π:"
            )


@router.message(Register.waiting_for_fullname)
async def get_fullname(message: Message, state: FSMContext):
    await state.update_data(full_name=message.text)
    await state.set_state(Register.waiting_for_study_group)
    await message.answer("–¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏ –Ω–æ–º–µ—Ä —Å–≤–æ–µ–π –≥—Ä—É–ø–ø—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ë11-111):")


@router.message(Register.waiting_for_study_group)
async def get_study_group(message: Message, state: FSMContext):
    data = await state.get_data()
    full_name = data["full_name"]
    study_group = message.text

    async with async_session() as session:
        await session.execute(
            insert(User).values(
                user_id=message.from_user.id,
                full_name=full_name,
                study_group=study_group,
                is_subscribed=True,
            )
        )
        await session.commit()

    await message.answer(
        f"‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n–§–ò–û: {full_name}\n–ì—Ä—É–ø–ø–∞: {study_group}"
    )
    await message.answer(
        "–¢–µ–ø–µ—Ä—å —Ç—ã –º–æ–∂–µ—à—å —É–ø—Ä–∞–≤–ª—è—Ç—å –ø–æ–¥–ø–∏—Å–∫–æ–π –Ω–∏–∂–µ üëá",
        reply_markup=get_subscription_keyboard(True),
    )
    await state.clear()


@router.callback_query(F.data == "subscribe")
async def subscribe(callback: CallbackQuery):
    async with async_session() as session:
        await session.execute(
            update(User)
            .where(User.user_id == callback.from_user.id)
            .values(is_subscribed=True)
        )
        await session.commit()
    await callback.message.edit_reply_markup(
        reply_markup=get_subscription_keyboard(True)
    )
    await callback.answer("‚úÖ –í—ã –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É!")


@router.callback_query(F.data == "unsubscribe")
async def unsubscribe(callback: CallbackQuery):
    async with async_session() as session:
        await session.execute(
            update(User)
            .where(User.user_id == callback.from_user.id)
            .values(is_subscribed=False)
        )
        await session.commit()
        await callback.message.edit_reply_markup(
            reply_markup=get_subscription_keyboard(False)
        )
    await callback.answer("‚ùå –í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç —Ä–∞—Å—Å—ã–ª–∫–∏.")
